"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@tanem";
exports.ids = ["vendor-chunks/@tanem"];
exports.modules = {

/***/ "(ssr)/./node_modules/@tanem/svg-injector/dist/index.js":
/*!********************************************************!*\
  !*** ./node_modules/@tanem/svg-injector/dist/index.js ***!
  \********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\nif (false) {} else {\n  module.exports = __webpack_require__(/*! ./svg-injector.cjs.development.js */ \"(ssr)/./node_modules/@tanem/svg-injector/dist/svg-injector.cjs.development.js\")\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRhbmVtL3N2Zy1pbmplY3Rvci9kaXN0L2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFZOztBQUVaLElBQUksS0FBcUMsRUFBRSxFQUUxQyxDQUFDO0FBQ0YsRUFBRSw4SkFBNkQ7QUFDL0QiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zbWFydGNyb3cvLi9ub2RlX21vZHVsZXMvQHRhbmVtL3N2Zy1pbmplY3Rvci9kaXN0L2luZGV4LmpzPzUzN2IiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnXG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9zdmctaW5qZWN0b3IuY2pzLnByb2R1Y3Rpb24uanMnKVxufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL3N2Zy1pbmplY3Rvci5janMuZGV2ZWxvcG1lbnQuanMnKVxufVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@tanem/svg-injector/dist/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@tanem/svg-injector/dist/svg-injector.cjs.development.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@tanem/svg-injector/dist/svg-injector.cjs.development.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nvar tslib = __webpack_require__(/*! tslib */ \"(ssr)/./node_modules/tslib/tslib.es6.mjs\");\nvar contentType = __webpack_require__(/*! content-type */ \"(ssr)/./node_modules/content-type/index.js\");\n\nvar cache = new Map();\n\nvar cloneSvg = function cloneSvg(sourceSvg) {\n  return sourceSvg.cloneNode(true);\n};\n\nvar isLocal = function isLocal() {\n  return window.location.protocol === 'file:';\n};\n\nvar makeAjaxRequest = function makeAjaxRequest(url, httpRequestWithCredentials, callback) {\n  var httpRequest = new XMLHttpRequest();\n  httpRequest.onreadystatechange = function () {\n    try {\n      if (!/\\.svg/i.test(url) && httpRequest.readyState === 2) {\n        var contentType$1 = httpRequest.getResponseHeader('Content-Type');\n        if (!contentType$1) {\n          throw new Error('Content type not found');\n        }\n        var type = contentType.parse(contentType$1).type;\n        if (!(type === 'image/svg+xml' || type === 'text/plain')) {\n          throw new Error(\"Invalid content type: \".concat(type));\n        }\n      }\n      if (httpRequest.readyState === 4) {\n        if (httpRequest.status === 404 || httpRequest.responseXML === null) {\n          throw new Error(isLocal() ? 'Note: SVG injection ajax calls do not work locally without ' + 'adjusting security settings in your browser. Or consider ' + 'using a local webserver.' : 'Unable to load SVG file: ' + url);\n        }\n        if (httpRequest.status === 200 || isLocal() && httpRequest.status === 0) {\n          callback(null, httpRequest);\n        } else {\n          throw new Error('There was a problem injecting the SVG: ' + httpRequest.status + ' ' + httpRequest.statusText);\n        }\n      }\n    } catch (error) {\n      httpRequest.abort();\n      if (error instanceof Error) {\n        callback(error, httpRequest);\n      } else {\n        throw error;\n      }\n    }\n  };\n  httpRequest.open('GET', url);\n  httpRequest.withCredentials = httpRequestWithCredentials;\n  if (httpRequest.overrideMimeType) {\n    httpRequest.overrideMimeType('text/xml');\n  }\n  httpRequest.send();\n};\n\nvar requestQueue = {};\nvar queueRequest = function queueRequest(url, callback) {\n  requestQueue[url] = requestQueue[url] || [];\n  requestQueue[url].push(callback);\n};\nvar processRequestQueue = function processRequestQueue(url) {\n  var _loop_1 = function _loop_1(i, len) {\n    setTimeout(function () {\n      if (Array.isArray(requestQueue[url])) {\n        var cacheValue = cache.get(url);\n        var callback = requestQueue[url][i];\n        if (cacheValue instanceof SVGSVGElement) {\n          callback(null, cloneSvg(cacheValue));\n        }\n        if (cacheValue instanceof Error) {\n          callback(cacheValue);\n        }\n        if (i === requestQueue[url].length - 1) {\n          delete requestQueue[url];\n        }\n      }\n    }, 0);\n  };\n  for (var i = 0, len = requestQueue[url].length; i < len; i++) {\n    _loop_1(i);\n  }\n};\n\nvar loadSvgCached = function loadSvgCached(url, httpRequestWithCredentials, callback) {\n  if (cache.has(url)) {\n    var cacheValue = cache.get(url);\n    if (cacheValue === undefined) {\n      queueRequest(url, callback);\n      return;\n    }\n    if (cacheValue instanceof SVGSVGElement) {\n      callback(null, cloneSvg(cacheValue));\n      return;\n    }\n  }\n  cache.set(url, undefined);\n  queueRequest(url, callback);\n  makeAjaxRequest(url, httpRequestWithCredentials, function (error, httpRequest) {\n    var _a;\n    if (error) {\n      cache.set(url, error);\n    } else if (((_a = httpRequest.responseXML) === null || _a === void 0 ? void 0 : _a.documentElement) instanceof SVGSVGElement) {\n      cache.set(url, httpRequest.responseXML.documentElement);\n    }\n    processRequestQueue(url);\n  });\n};\n\nvar loadSvgUncached = function loadSvgUncached(url, httpRequestWithCredentials, callback) {\n  makeAjaxRequest(url, httpRequestWithCredentials, function (error, httpRequest) {\n    var _a;\n    if (error) {\n      callback(error);\n    } else if (((_a = httpRequest.responseXML) === null || _a === void 0 ? void 0 : _a.documentElement) instanceof SVGSVGElement) {\n      callback(null, httpRequest.responseXML.documentElement);\n    }\n  });\n};\n\nvar idCounter = 0;\nvar uniqueId = function uniqueId() {\n  return ++idCounter;\n};\n\nvar injectedElements = [];\nvar ranScripts = {};\nvar svgNamespace = 'http://www.w3.org/2000/svg';\nvar xlinkNamespace = 'http://www.w3.org/1999/xlink';\nvar injectElement = function injectElement(el, evalScripts, renumerateIRIElements, cacheRequests, httpRequestWithCredentials, beforeEach, callback) {\n  var elUrl = el.getAttribute('data-src') || el.getAttribute('src');\n  if (!elUrl) {\n    callback(new Error('Invalid data-src or src attribute'));\n    return;\n  }\n  if (injectedElements.indexOf(el) !== -1) {\n    injectedElements.splice(injectedElements.indexOf(el), 1);\n    el = null;\n    return;\n  }\n  injectedElements.push(el);\n  el.setAttribute('src', '');\n  var loadSvg = cacheRequests ? loadSvgCached : loadSvgUncached;\n  loadSvg(elUrl, httpRequestWithCredentials, function (error, svg) {\n    if (!svg) {\n      injectedElements.splice(injectedElements.indexOf(el), 1);\n      el = null;\n      callback(error);\n      return;\n    }\n    var elId = el.getAttribute('id');\n    if (elId) {\n      svg.setAttribute('id', elId);\n    }\n    var elTitle = el.getAttribute('title');\n    if (elTitle) {\n      svg.setAttribute('title', elTitle);\n    }\n    var elWidth = el.getAttribute('width');\n    if (elWidth) {\n      svg.setAttribute('width', elWidth);\n    }\n    var elHeight = el.getAttribute('height');\n    if (elHeight) {\n      svg.setAttribute('height', elHeight);\n    }\n    var mergedClasses = Array.from(new Set(tslib.__spreadArray(tslib.__spreadArray(tslib.__spreadArray([], (svg.getAttribute('class') || '').split(' '), true), ['injected-svg'], false), (el.getAttribute('class') || '').split(' '), true))).join(' ').trim();\n    svg.setAttribute('class', mergedClasses);\n    var elStyle = el.getAttribute('style');\n    if (elStyle) {\n      svg.setAttribute('style', elStyle);\n    }\n    svg.setAttribute('data-src', elUrl);\n    var elData = [].filter.call(el.attributes, function (at) {\n      return /^data-\\w[\\w-]*$/.test(at.name);\n    });\n    Array.prototype.forEach.call(elData, function (dataAttr) {\n      if (dataAttr.name && dataAttr.value) {\n        svg.setAttribute(dataAttr.name, dataAttr.value);\n      }\n    });\n    if (renumerateIRIElements) {\n      var iriElementsAndProperties_1 = {\n        clipPath: ['clip-path'],\n        'color-profile': ['color-profile'],\n        cursor: ['cursor'],\n        filter: ['filter'],\n        linearGradient: ['fill', 'stroke'],\n        marker: ['marker', 'marker-start', 'marker-mid', 'marker-end'],\n        mask: ['mask'],\n        path: [],\n        pattern: ['fill', 'stroke'],\n        radialGradient: ['fill', 'stroke']\n      };\n      var element_1;\n      var elements_1;\n      var properties_1;\n      var currentId_1;\n      var newId_1;\n      Object.keys(iriElementsAndProperties_1).forEach(function (key) {\n        element_1 = key;\n        properties_1 = iriElementsAndProperties_1[key];\n        elements_1 = svg.querySelectorAll(element_1 + '[id]');\n        var _loop_1 = function _loop_1(a, elementsLen) {\n          currentId_1 = elements_1[a].id;\n          newId_1 = currentId_1 + '-' + uniqueId();\n          var referencingElements;\n          Array.prototype.forEach.call(properties_1, function (property) {\n            referencingElements = svg.querySelectorAll('[' + property + '*=\"' + currentId_1 + '\"]');\n            for (var b = 0, referencingElementLen = referencingElements.length; b < referencingElementLen; b++) {\n              var attrValue = referencingElements[b].getAttribute(property);\n              if (attrValue && !attrValue.match(new RegExp('url\\\\(\"?#' + currentId_1 + '\"?\\\\)'))) {\n                continue;\n              }\n              referencingElements[b].setAttribute(property, 'url(#' + newId_1 + ')');\n            }\n          });\n          var allLinks = svg.querySelectorAll('[*|href]');\n          var links = [];\n          for (var c = 0, allLinksLen = allLinks.length; c < allLinksLen; c++) {\n            var href = allLinks[c].getAttributeNS(xlinkNamespace, 'href');\n            if (href && href.toString() === '#' + elements_1[a].id) {\n              links.push(allLinks[c]);\n            }\n          }\n          for (var d = 0, linksLen = links.length; d < linksLen; d++) {\n            links[d].setAttributeNS(xlinkNamespace, 'href', '#' + newId_1);\n          }\n          elements_1[a].id = newId_1;\n        };\n        for (var a = 0, elementsLen = elements_1.length; a < elementsLen; a++) {\n          _loop_1(a);\n        }\n      });\n    }\n    svg.removeAttribute('xmlns:a');\n    var scripts = svg.querySelectorAll('script');\n    var scriptsToEval = [];\n    var script;\n    var scriptType;\n    for (var i = 0, scriptsLen = scripts.length; i < scriptsLen; i++) {\n      scriptType = scripts[i].getAttribute('type');\n      if (!scriptType || scriptType === 'application/ecmascript' || scriptType === 'application/javascript' || scriptType === 'text/javascript') {\n        script = scripts[i].innerText || scripts[i].textContent;\n        if (script) {\n          scriptsToEval.push(script);\n        }\n        svg.removeChild(scripts[i]);\n      }\n    }\n    if (scriptsToEval.length > 0 && (evalScripts === 'always' || evalScripts === 'once' && !ranScripts[elUrl])) {\n      for (var l = 0, scriptsToEvalLen = scriptsToEval.length; l < scriptsToEvalLen; l++) {\n        new Function(scriptsToEval[l])(window);\n      }\n      ranScripts[elUrl] = true;\n    }\n    var styleTags = svg.querySelectorAll('style');\n    Array.prototype.forEach.call(styleTags, function (styleTag) {\n      styleTag.textContent += '';\n    });\n    svg.setAttribute('xmlns', svgNamespace);\n    svg.setAttribute('xmlns:xlink', xlinkNamespace);\n    beforeEach(svg);\n    if (!el.parentNode) {\n      injectedElements.splice(injectedElements.indexOf(el), 1);\n      el = null;\n      callback(new Error('Parent node is null'));\n      return;\n    }\n    el.parentNode.replaceChild(svg, el);\n    injectedElements.splice(injectedElements.indexOf(el), 1);\n    el = null;\n    callback(null, svg);\n  });\n};\n\nvar SVGInjector = function SVGInjector(elements, _a) {\n  var _b = _a === void 0 ? {} : _a,\n    _c = _b.afterAll,\n    afterAll = _c === void 0 ? function () {\n      return undefined;\n    } : _c,\n    _d = _b.afterEach,\n    afterEach = _d === void 0 ? function () {\n      return undefined;\n    } : _d,\n    _e = _b.beforeEach,\n    beforeEach = _e === void 0 ? function () {\n      return undefined;\n    } : _e,\n    _f = _b.cacheRequests,\n    cacheRequests = _f === void 0 ? true : _f,\n    _g = _b.evalScripts,\n    evalScripts = _g === void 0 ? 'never' : _g,\n    _h = _b.httpRequestWithCredentials,\n    httpRequestWithCredentials = _h === void 0 ? false : _h,\n    _j = _b.renumerateIRIElements,\n    renumerateIRIElements = _j === void 0 ? true : _j;\n  if (elements && 'length' in elements) {\n    var elementsLoaded_1 = 0;\n    for (var i = 0, j = elements.length; i < j; i++) {\n      injectElement(elements[i], evalScripts, renumerateIRIElements, cacheRequests, httpRequestWithCredentials, beforeEach, function (error, svg) {\n        afterEach(error, svg);\n        if (elements && 'length' in elements && elements.length === ++elementsLoaded_1) {\n          afterAll(elementsLoaded_1);\n        }\n      });\n    }\n  } else if (elements) {\n    injectElement(elements, evalScripts, renumerateIRIElements, cacheRequests, httpRequestWithCredentials, beforeEach, function (error, svg) {\n      afterEach(error, svg);\n      afterAll(1);\n      elements = null;\n    });\n  } else {\n    afterAll(0);\n  }\n};\n\nexports.SVGInjector = SVGInjector;\n//# sourceMappingURL=svg-injector.cjs.development.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@tanem/svg-injector/dist/svg-injector.cjs.development.js\n");

/***/ })

};
;